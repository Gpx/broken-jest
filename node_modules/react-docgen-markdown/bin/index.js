#! /usr/bin/env node
var fs = require('fs')
var reactDocs = require('react-docgen')
var json2md = require('json2md')
var path = require('path')
var glob = require('glob')

glob(process.argv[2], function (er, files) {
  var componentMarkdownsPerFolder = {}

  files.forEach(function (filePath) {
    try {
      var compInfo = reactDocs.parse(fs.readFileSync(filePath))

      var template = []
      if (compInfo.displayName) {
        template.push({ h1: compInfo.displayName })
      }

      if (compInfo.description) {
        template.push({ p: compInfo.description })
      }

      if (compInfo.props) {
        var propTableRows = Object.keys(compInfo.props).map(function (propName) {
          var prop = compInfo.props[propName]

          var type = prop.type.name
          if (type === 'enum') {
            type = type + ' ('
            prop.type.value.forEach(function (subProp, index) {
              type = type + subProp.value
              if (index !== prop.type.value.length - 1) {
                type = type + ', '
              }
            })
            type = type + ')'
          }

          if (type === 'union') {
            type = type + ' ('
            prop.type.value.forEach(function (subProp, index) {
              type = type + subProp.name
              if (index !== prop.type.value.length - 1) {
                type = type + ', '
              }
            })
            type = type + ')'
          }

          return [
            propName, // Name
            type, // Type
            prop.description, // Description
            prop.required ? 'X' : ' ' // Required
          ]
        })
        template.push([
          { h2: 'Props' },
          {
            table: {
              headers: ['Name', 'Type', 'Description', 'Required'],
              rows: propTableRows
            }
          }
        ])
      }

      var compMD = json2md(template)
      if (!componentMarkdownsPerFolder[path.dirname(filePath)]) {
        componentMarkdownsPerFolder[path.dirname(filePath)] = []
      }
      componentMarkdownsPerFolder[path.dirname(filePath)].push(compMD)
    } catch (err) {}
  })

  Object.keys(componentMarkdownsPerFolder).forEach(function (compFolder) {
    var markdownContent = ''
    componentMarkdownsPerFolder[compFolder].forEach(function (compMD) {
      markdownContent = markdownContent + compMD + '\n\n\n'
    })
    fs.writeFileSync(compFolder + '/README.md', markdownContent)
  })
})
